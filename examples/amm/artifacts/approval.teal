#pragma version 8
intcblock 0 1 1000 4 10000000000
bytecblock 0x61 0x62 0x70 0x67 0x72
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x08a956f7 // "set_governor(account)void"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x6b59d965 // "bootstrap(pay,asset,asset)uint64"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x5cbf1e2d // "mint(axfer,axfer,asset,asset,asset)void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x1436c2ac // "burn(axfer,asset,asset,asset)void"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x4a88e055 // "swap(axfer,asset,asset)void"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 49
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 50
txn GroupIndex
intc_1 // 1
-
store 48
load 48
gtxns TypeEnum
intc_3 // axfer
==
assert
load 48
load 49
load 50
callsub swap_15
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 45
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 46
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 47
txn GroupIndex
intc_1 // 1
-
store 44
load 44
gtxns TypeEnum
intc_3 // axfer
==
assert
load 44
load 45
load 46
load 47
callsub burn_14
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 41
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 42
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 43
txn GroupIndex
pushint 2 // 2
-
store 39
load 39
gtxns TypeEnum
intc_3 // axfer
==
assert
txn GroupIndex
intc_1 // 1
-
store 40
load 40
gtxns TypeEnum
intc_3 // axfer
==
assert
load 39
load 40
load 41
load 42
load 43
callsub mint_13
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 27
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 28
txn GroupIndex
intc_1 // 1
-
store 26
load 26
gtxns TypeEnum
intc_1 // pay
==
assert
load 26
load 27
load 28
callsub bootstrap_12
store 29
pushbytes 0x151f7c75 // 0x151f7c75
load 29
itob
concat
log
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub setgovernor_11
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
err
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
bytec_3 // "g"
global CreatorAddress
app_global_put
bytec 4 // "r"
intc_0 // 0
app_global_put
retsub

// auth_only
authonly_1:
bytec_3 // "g"
app_global_get
==
retsub

// auth_only
authonly_2:
bytec_3 // "g"
app_global_get
==
retsub

// tokens_to_mint
tokenstomint_3:
store 13
store 12
store 11
store 10
store 9
load 12
intc_2 // 1000
mulw
intc_0 // 0
load 10
divmodw
pop
pop
swap
!
assert
store 14
load 13
intc_2 // 1000
mulw
intc_0 // 0
load 11
divmodw
pop
pop
swap
!
assert
store 15
load 14
load 15
<
bnz tokenstomint_3_l2
load 15
b tokenstomint_3_l3
tokenstomint_3_l2:
load 14
tokenstomint_3_l3:
load 9
mulw
intc_0 // 0
intc_2 // 1000
divmodw
pop
pop
swap
!
assert
retsub

// tokens_to_mint_initial
tokenstomintinitial_4:
*
sqrt
intc_2 // 1000
-
retsub

// tokens_to_burn
tokenstoburn_5:
store 22
store 21
store 20
load 21
load 22
mulw
intc_0 // 0
load 20
divmodw
pop
pop
swap
!
assert
retsub

// tokens_to_swap
tokenstoswap_6:
store 25
store 24
store 23
load 23
intc_2 // 1000
pushint 5 // 5
-
mulw
load 25
uncover 2
dig 1
*
cover 2
mulw
cover 2
+
swap
intc_0 // 0
load 24
intc_2 // 1000
*
load 23
intc_2 // 1000
pushint 5 // 5
-
*
+
divmodw
pop
pop
swap
!
assert
retsub

// do_axfer
doaxfer_7:
store 3
store 2
store 1
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
load 2
itxn_field XferAsset
load 3
itxn_field AssetAmount
load 1
itxn_field AssetReceiver
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// do_opt_in
dooptin_8:
store 0
global CurrentApplicationAddress
load 0
intc_0 // 0
callsub doaxfer_7
retsub

// do_create_pool_token
docreatepooltoken_9:
store 4
asset_params_get AssetUnitName
store 6
store 5
load 4
asset_params_get AssetUnitName
store 8
store 7
load 6
assert
load 8
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
pushbytes 0x4450542d // "DPT-"
load 5
concat
pushbytes 0x2d // "-"
concat
load 7
concat
itxn_field ConfigAssetName
pushbytes 0x647074 // "dpt"
itxn_field ConfigAssetUnitName
intc 4 // 10000000000
itxn_field ConfigAssetTotal
pushint 3 // 3
itxn_field ConfigAssetDecimals
global CurrentApplicationAddress
itxn_field ConfigAssetManager
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
intc_0 // 0
itxn_field Fee
itxn_submit
itxn CreatedAssetID
retsub

// compute_ratio
computeratio_10:
global CurrentApplicationAddress
bytec_0 // "a"
app_global_get
asset_holding_get AssetBalance
store 17
store 16
global CurrentApplicationAddress
bytec_1 // "b"
app_global_get
asset_holding_get AssetBalance
store 19
store 18
load 17
assert
load 19
assert
load 16
intc_2 // 1000
mulw
intc_0 // 0
load 18
divmodw
pop
pop
swap
!
assert
retsub

// set_governor
setgovernor_11:
store 51
txn Sender
callsub authonly_1
// unauthorized
assert
bytec_3 // "g"
load 51
txnas Accounts
app_global_put
retsub

// bootstrap
bootstrap_12:
store 32
store 31
store 30
txn Sender
callsub authonly_2
// unauthorized
assert
global GroupSize
pushint 2 // 2
==
// group size not 2
assert
load 30
gtxns Receiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 30
gtxns Amount
pushint 300000 // 300000
>=
// amount minimum not met
assert
load 31
txnas Assets
load 32
txnas Assets
<
// asset a or asset b incorrect
assert
intc_0 // 0
bytec_0 // "a"
app_global_get_ex
store 34
store 33
load 34
!
assert
bytec_0 // "a"
load 31
txnas Assets
app_global_put
intc_0 // 0
bytec_1 // "b"
app_global_get_ex
store 36
store 35
load 36
!
assert
bytec_1 // "b"
load 32
txnas Assets
app_global_put
intc_0 // 0
bytec_2 // "p"
app_global_get_ex
store 38
store 37
load 38
!
assert
bytec_2 // "p"
bytec_0 // "a"
app_global_get
bytec_1 // "b"
app_global_get
callsub docreatepooltoken_9
app_global_put
bytec_0 // "a"
app_global_get
callsub dooptin_8
bytec_1 // "b"
app_global_get
callsub dooptin_8
bytec_2 // "p"
app_global_get
retsub

// mint
mint_13:
store 56
store 55
store 54
store 53
store 52
load 55
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
load 56
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
load 54
txnas Assets
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
load 52
gtxns Sender
txn Sender
==
load 53
gtxns Sender
txn Sender
==
&&
// invalid sender
assert
load 52
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 52
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
load 52
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
load 53
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 53
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
load 53
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
global CurrentApplicationAddress
load 54
asset_holding_get AssetBalance
store 58
store 57
global CurrentApplicationAddress
load 55
asset_holding_get AssetBalance
store 60
store 59
global CurrentApplicationAddress
load 56
asset_holding_get AssetBalance
store 62
store 61
load 58
assert
load 60
assert
load 62
assert
load 59
load 52
gtxns AssetAmount
==
load 61
load 53
gtxns AssetAmount
==
&&
bnz mint_13_l2
intc 4 // 10000000000
load 57
-
load 59
load 52
gtxns AssetAmount
-
load 61
load 53
gtxns AssetAmount
-
load 52
gtxns AssetAmount
load 53
gtxns AssetAmount
callsub tokenstomint_3
b mint_13_l3
mint_13_l2:
load 52
gtxns AssetAmount
load 53
gtxns AssetAmount
callsub tokenstomintinitial_4
mint_13_l3:
store 63
load 63
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
bytec_2 // "p"
app_global_get
load 63
callsub doaxfer_7
bytec 4 // "r"
callsub computeratio_10
app_global_put
retsub

// burn
burn_14:
store 67
store 66
store 65
store 64
load 65
txnas Assets
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
load 66
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
load 67
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
load 64
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 64
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
load 64
gtxns XferAsset
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
load 64
gtxns Sender
txn Sender
==
// invalid sender
assert
global CurrentApplicationAddress
load 65
asset_holding_get AssetBalance
store 69
store 68
global CurrentApplicationAddress
load 66
asset_holding_get AssetBalance
store 71
store 70
global CurrentApplicationAddress
load 67
asset_holding_get AssetBalance
store 73
store 72
load 69
assert
load 71
assert
load 73
assert
intc 4 // 10000000000
load 68
load 64
gtxns AssetAmount
-
-
store 74
load 74
load 70
load 64
gtxns AssetAmount
callsub tokenstoburn_5
store 75
load 74
load 72
load 64
gtxns AssetAmount
callsub tokenstoburn_5
store 76
txn Sender
bytec_0 // "a"
app_global_get
load 75
callsub doaxfer_7
txn Sender
bytec_1 // "b"
app_global_get
load 76
callsub doaxfer_7
bytec 4 // "r"
callsub computeratio_10
app_global_put
retsub

// swap
swap_15:
store 79
store 78
store 77
load 78
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
load 79
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
load 77
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
load 77
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
||
// asset a or asset b incorrect
assert
load 77
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
load 77
gtxns Sender
txn Sender
==
// invalid sender
assert
global CurrentApplicationAddress
load 77
gtxns XferAsset
asset_holding_get AssetBalance
store 81
store 80
global CurrentApplicationAddress
load 77
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_15_l5
bytec_0 // "a"
app_global_get
swap_15_l2:
asset_holding_get AssetBalance
store 83
store 82
load 81
assert
load 83
assert
load 77
gtxns AssetAmount
load 80
load 77
gtxns AssetAmount
-
load 82
callsub tokenstoswap_6
store 84
load 84
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
load 77
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_15_l4
bytec_0 // "a"
app_global_get
b swap_15_l6
swap_15_l4:
bytec_1 // "b"
app_global_get
b swap_15_l6
swap_15_l5:
bytec_1 // "b"
app_global_get
b swap_15_l2
swap_15_l6:
load 84
callsub doaxfer_7
bytec 4 // "r"
callsub computeratio_10
app_global_put
retsub