{
    "hints": {
        "read_rsvp": {
            "read_only": true
        },
        "read_price": {
            "read_only": true
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEgMCAxMDAwIDEwMDAwMApieXRlY2Jsb2NrIDB4NzI3Mzc2NzAgMHg3MDcyNjk2MzY1IDB4MTUxZjdjNzUgMHg2MzY4NjU2MzZiNjU2NDVmNjk2ZQp0eG4gTnVtQXBwQXJncwppbnRjXzEgLy8gMAo9PQpibnogbWFpbl9sMTQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyNDBkMmY2NyAvLyAiY3JlYXRlKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhlOTIyYmU5NSAvLyAiZG9fcnN2cChwYXkpdm9pZCIKPT0KYm56IG1haW5fbDEyCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4OGZlMjVlMDUgLy8gImNoZWNrX2luKCl2b2lkIgo9PQpibnogbWFpbl9sMTEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg0MTcwYzRjNyAvLyAid2l0aGRyYXdfZXh0ZXJuYWwoKXZvaWQiCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGVmOTc3MjU1IC8vICJyZWFkX3JzdnAoKXVpbnQ2NCIKPT0KYm56IG1haW5fbDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4YTIzZWUyMSAvLyAicmVhZF9wcmljZSgpdWludDY0Igo9PQpibnogbWFpbl9sOAplcnIKbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzEgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzEgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiByZWFkcHJpY2VfMTAKc3RvcmUgMgpieXRlY18yIC8vIDB4MTUxZjdjNzUKbG9hZCAyCml0b2IKY29uY2F0CmxvZwppbnRjXzAgLy8gMQpyZXR1cm4KbWFpbl9sOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzEgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzEgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiByZWFkcnN2cF85CnN0b3JlIDEKYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CmxvYWQgMQppdG9iCmNvbmNhdApsb2cKaW50Y18wIC8vIDEKcmV0dXJuCm1haW5fbDEwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMSAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHdpdGhkcmF3ZXh0ZXJuYWxfOAppbnRjXzAgLy8gMQpyZXR1cm4KbWFpbl9sMTE6CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18xIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY2hlY2tpbl83CmludGNfMCAvLyAxCnJldHVybgptYWluX2wxMjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gT3B0SW4KPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18xIC8vIDAKIT0KJiYKYXNzZXJ0CnR4biBHcm91cEluZGV4CmludGNfMCAvLyAxCi0Kc3RvcmUgMApsb2FkIDAKZ3R4bnMgVHlwZUVudW0KaW50Y18wIC8vIHBheQo9PQphc3NlcnQKbG9hZCAwCmNhbGxzdWIgZG9yc3ZwXzYKaW50Y18wIC8vIDEKcmV0dXJuCm1haW5fbDEzOgp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMSAvLyAwCj09CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKY2FsbHN1YiBjcmVhdGVfNQppbnRjXzAgLy8gMQpyZXR1cm4KbWFpbl9sMTQ6CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCAyIC8vIENsb3NlT3V0Cj09CmJueiBtYWluX2wxOAp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTcKZXJyCm1haW5fbDE3Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzEgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBkZWxldGVfMwppbnRjXzAgLy8gMQpyZXR1cm4KbWFpbl9sMTg6CnR4biBBcHBsaWNhdGlvbklECmludGNfMSAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHJlZnVuZF8xMQppbnRjXzAgLy8gMQpyZXR1cm4KCi8vIGF1dGhfb3B0ZWRfaW4KYXV0aG9wdGVkaW5fMDoKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgpyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8xOgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfMjoKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09CnJldHN1YgoKLy8gZGVsZXRlCmRlbGV0ZV8zOgp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfMgovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKaW50Y18zIC8vIDEwMDAwMAppbnRjXzIgLy8gMTAwMAorCj4KYnogZGVsZXRlXzNfbDIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYmFsYW5jZQppbnRjXzMgLy8gMTAwMDAwCmludGNfMiAvLyAxMDAwCisKPgphc3NlcnQKaXR4bl9iZWdpbgppbnRjXzAgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KdHhuIFNlbmRlcgppdHhuX2ZpZWxkIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKaW50Y18zIC8vIDEwMDAwMAppbnRjXzIgLy8gMTAwMAorCi0KaXR4bl9maWVsZCBBbW91bnQKaXR4bl9zdWJtaXQKZGVsZXRlXzNfbDI6CnJldHN1YgoKLy8gYXV0aF9vbmx5CmF1dGhvbmx5XzQ6Cmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGNyZWF0ZQpjcmVhdGVfNToKc3RvcmUgMwpieXRlY18xIC8vICJwcmljZSIKcHVzaGludCAxMDAwMDAwIC8vIDEwMDAwMDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMCAvLyAicnN2cCIKaW50Y18xIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAicHJpY2UiCmxvYWQgMwphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGRvX3JzdnAKZG9yc3ZwXzY6CnN0b3JlIDQKZ2xvYmFsIEdyb3VwU2l6ZQpwdXNoaW50IDIgLy8gMgo9PQphc3NlcnQKbG9hZCA0Cmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09CmFzc2VydApsb2FkIDQKZ3R4bnMgQW1vdW50CmJ5dGVjXzEgLy8gInByaWNlIgphcHBfZ2xvYmFsX2dldAo9PQphc3NlcnQKdHhuIFNlbmRlcgpieXRlY18zIC8vICJjaGVja2VkX2luIgppbnRjXzEgLy8gMAphcHBfbG9jYWxfcHV0CmJ5dGVjXzAgLy8gInJzdnAiCmJ5dGVjXzAgLy8gInJzdnAiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAxCisKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBjaGVja19pbgpjaGVja2luXzc6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob3B0ZWRpbl8wCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKdHhuIFNlbmRlcgpieXRlY18zIC8vICJjaGVja2VkX2luIgppbnRjXzAgLy8gMQphcHBfbG9jYWxfcHV0CnJldHN1YgoKLy8gd2l0aGRyYXdfZXh0ZXJuYWwKd2l0aGRyYXdleHRlcm5hbF84Ogp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfMQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKaW50Y18zIC8vIDEwMDAwMAppbnRjXzIgLy8gMTAwMAorCj4KYXNzZXJ0Cml0eG5fYmVnaW4KaW50Y18wIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCnR4biBTZW5kZXIKaXR4bl9maWVsZCBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCmludGNfMyAvLyAxMDAwMDAKaW50Y18yIC8vIDEwMDAKKwotCml0eG5fZmllbGQgQW1vdW50Cml0eG5fc3VibWl0CnJldHN1YgoKLy8gcmVhZF9yc3ZwCnJlYWRyc3ZwXzk6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV80Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMCAvLyAicnN2cCIKYXBwX2dsb2JhbF9nZXQKcmV0c3ViCgovLyByZWFkX3ByaWNlCnJlYWRwcmljZV8xMDoKYnl0ZWNfMSAvLyAicHJpY2UiCmFwcF9nbG9iYWxfZ2V0CnJldHN1YgoKLy8gcmVmdW5kCnJlZnVuZF8xMToKaXR4bl9iZWdpbgppbnRjXzAgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KdHhuIFNlbmRlcgppdHhuX2ZpZWxkIFJlY2VpdmVyCmJ5dGVjXzEgLy8gInByaWNlIgphcHBfZ2xvYmFsX2dldAppbnRjXzIgLy8gMTAwMAotCml0eG5fZmllbGQgQW1vdW50Cml0eG5fc3VibWl0CmJ5dGVjXzAgLy8gInJzdnAiCmJ5dGVjXzAgLy8gInJzdnAiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAxCi0KYXBwX2dsb2JhbF9wdXQKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEKYnl0ZWNibG9jayAweDcyNzM3NjcwCnR4biBOdW1BcHBBcmdzCnB1c2hpbnQgMCAvLyAwCj09CmJueiBtYWluX2wyCmVycgptYWluX2wyOgpjYWxsc3ViIHJlZnVuZF8wCmludGNfMCAvLyAxCnJldHVybgoKLy8gcmVmdW5kCnJlZnVuZF8wOgppdHhuX2JlZ2luCmludGNfMCAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQp0eG4gU2VuZGVyCml0eG5fZmllbGQgUmVjZWl2ZXIKcHVzaGJ5dGVzIDB4NzA3MjY5NjM2NSAvLyAicHJpY2UiCmFwcF9nbG9iYWxfZ2V0CnB1c2hpbnQgMTAwMCAvLyAxMDAwCi0KaXR4bl9maWVsZCBBbW91bnQKaXR4bl9zdWJtaXQKYnl0ZWNfMCAvLyAicnN2cCIKYnl0ZWNfMCAvLyAicnN2cCIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDEKLQphcHBfZ2xvYmFsX3B1dApyZXRzdWI="
    },
    "schema": {
        "local": {
            "declared": {
                "checked_in": {
                    "type": "uint64",
                    "key": "checked_in",
                    "descr": "0 = not checked in, 1 = checked in"
                }
            },
            "reserved": {}
        },
        "global": {
            "declared": {
                "price": {
                    "type": "uint64",
                    "key": "price",
                    "descr": "The price of the event. Default price is 1 Algo"
                },
                "rsvp": {
                    "type": "uint64",
                    "key": "rsvp",
                    "descr": "Number of people who RSVPed to the event"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "EventRSVP",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "event_price"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Deploys the contract and initialze the app states"
            },
            {
                "name": "do_rsvp",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Let txn sender rsvp to the event by opting into the contract"
            },
            {
                "name": "check_in",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "If the Sender RSVPed, check-in the Sender"
            },
            {
                "name": "withdraw_external",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Let event creator to withdraw all funds in the contract"
            },
            {
                "name": "read_rsvp",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Read amount of RSVP to the event. Only callable by Creator."
            },
            {
                "name": "read_price",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Read amount of RSVP to the event. Only callable by Creator."
            }
        ],
        "networks": {}
    }
}