#pragma version 8
intcblock 0 127 1
bytecblock 0x151f7c75 0x6465636c617265645f6170705f76616c7565 0x6465636c617265645f6163636f756e745f76616c7565 0x00 0x000102 0x000102030405060708090a0b0c0d0e0f 0x
txn NumAppArgs
intc_0 // 0
==
bnz main_l28
txna ApplicationArgs 0
pushbytes 0xaa6a1d79 // "write_acct_blob(string)void"
==
bnz main_l27
txna ApplicationArgs 0
pushbytes 0x5a234a90 // "read_acct_blob()byte[]"
==
bnz main_l26
txna ApplicationArgs 0
pushbytes 0x3eb245fa // "write_app_blob(string)void"
==
bnz main_l25
txna ApplicationArgs 0
pushbytes 0xd5c95f6c // "read_app_blob()byte[]"
==
bnz main_l24
txna ApplicationArgs 0
pushbytes 0x29d9470f // "set_app_state_val(string)void"
==
bnz main_l23
txna ApplicationArgs 0
pushbytes 0xf4c22566 // "get_app_state_val()string"
==
bnz main_l22
txna ApplicationArgs 0
pushbytes 0xdfb4fae0 // "set_dynamic_app_state_val(uint8,uint64)void"
==
bnz main_l21
txna ApplicationArgs 0
pushbytes 0x55701da5 // "get_dynamic_app_state_val(uint8)uint64"
==
bnz main_l20
txna ApplicationArgs 0
pushbytes 0xfe60b52a // "set_account_state_val(uint64)void"
==
bnz main_l19
txna ApplicationArgs 0
pushbytes 0xb8dc9b59 // "incr_account_state_val(uint64)void"
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x5a98f372 // "get_account_state_val()uint64"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x5bdef52e // "set_dynamic_account_state_val(uint8,string)void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x67bea414 // "get_dynamic_account_state_val(uint8)string"
==
bnz main_l15
err
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub getdynamicaccountstateval_18
store 18
bytec_0 // 0x151f7c75
load 18
concat
log
intc_2 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 16
txna ApplicationArgs 2
store 17
load 16
load 17
callsub setdynamicaccountstateval_17
intc_2 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getaccountstateval_16
store 15
bytec_0 // 0x151f7c75
load 15
itob
concat
log
intc_2 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
callsub incraccountstateval_15
intc_2 // 1
return
main_l19:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
callsub setaccountstateval_14
intc_2 // 1
return
main_l20:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub getdynamicappstateval_13
store 13
bytec_0 // 0x151f7c75
load 13
itob
concat
log
intc_2 // 1
return
main_l21:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 11
txna ApplicationArgs 2
btoi
store 12
load 11
load 12
callsub setdynamicappstateval_12
intc_2 // 1
return
main_l22:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getappstateval_11
store 9
bytec_0 // 0x151f7c75
load 9
concat
log
intc_2 // 1
return
main_l23:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub setappstateval_10
intc_2 // 1
return
main_l24:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub readappblob_9
store 7
bytec_0 // 0x151f7c75
load 7
concat
log
intc_2 // 1
return
main_l25:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub writeappblob_8
intc_2 // 1
return
main_l26:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub readacctblob_7
store 5
bytec_0 // 0x151f7c75
load 5
concat
log
intc_2 // 1
return
main_l27:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub writeacctblob_6
intc_2 // 1
return
main_l28:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l32
txn OnCompletion
intc_2 // OptIn
==
bnz main_l31
err
main_l31:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_1
intc_2 // 1
return
main_l32:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_2 // 1
return

// create
create_0:
intc_0 // 0
bytec_1 // "declared_app_value"
app_global_get_ex
store 3
store 2
load 3
!
assert
bytec_1 // "declared_app_value"
pushbytes 0x41206465636c617265642073746174652076616c756520746861742069732070726f74656374656420776974682074686520607374617469636020666c6167 // "A declared state value that is protected with the `static` flag"
app_global_put
callsub zeroimpl_4
retsub

// opt_in
optin_1:
txn Sender
bytec_2 // "declared_account_value"
intc_2 // 1
app_local_put
txn Sender
callsub impl_5
retsub

// prefix_key_gen
prefixkeygen_2:
store 0
pushbytes 0x64796e616d69635f6170705f76616c7565 // "dynamic_app_value"
load 0
concat
retsub

// prefix_key_gen
prefixkeygen_3:
store 1
pushbytes 0x64796e616d69635f6163636f756e745f76616c7565 // "dynamic_account_value"
load 1
concat
retsub

// zero_impl
zeroimpl_4:
intc_1 // 127
bzero
pushint 16 // 16

    zero_loop:
        int 1
        -               // ["00"*page_size, key-1]
        dup2            // ["00"*page_size, key, "00"*page_size, key]
        itob            // ["00"*page_size, key, "00"*page_size, itob(key)]
        extract 7 1     // ["00"*page_size, key, "00"*page_size, itob(key)[-1]] get the last byte of the int
        swap            // ["00"*page_size, key, itob(key)[-1], "00"*page_size]
        app_global_put  // ["00"*page_size, key]  (removes top 2 elements)
        dup             // ["00"*page_size, key-1, key-1]
        bnz zero_loop   // start loop over if key-1>0
        pop
        pop             // take extra junk off the stack
        retsub
    callsub zero_loop
            
retsub

// _impl
impl_5:
store 4
load 4
bytec_3 // 0x00
intc_1 // 127
bzero
app_local_put
load 4
pushbytes 0x01 // 0x01
intc_1 // 127
bzero
app_local_put
load 4
pushbytes 0x02 // 0x02
intc_1 // 127
bzero
app_local_put
retsub

// write_acct_blob
writeacctblob_6:
store 21
txn Sender
intc_0 // 0
load 21
extract 2 0
callsub impl_21
retsub

// read_acct_blob
readacctblob_7:
txn Sender
intc_0 // 0
pushint 381 // 381
intc_2 // 1
-
callsub impl_19
store 6
load 6
len
itob
extract 6 0
load 6
concat
store 6
load 6
retsub

// write_app_blob
writeappblob_8:
store 37
intc_0 // 0
load 37
extract 2 0
callsub writeimpl_22
retsub

// read_app_blob
readappblob_9:
intc_0 // 0
pushint 2032 // 2032
intc_2 // 1
-
callsub readimpl_20
store 8
load 8
len
itob
extract 6 0
load 8
concat
store 8
load 8
retsub

// set_app_state_val
setappstateval_10:
store 51
intc_0 // 0
bytec_1 // "declared_app_value"
app_global_get_ex
store 53
store 52
load 53
!
assert
bytec_1 // "declared_app_value"
load 51
extract 2 0
app_global_put
retsub

// get_app_state_val
getappstateval_11:
bytec_1 // "declared_app_value"
app_global_get
store 10
load 10
len
itob
extract 6 0
load 10
concat
store 10
load 10
retsub

// set_dynamic_app_state_val
setdynamicappstateval_12:
store 55
store 54
bytec_3 // 0x00
intc_0 // 0
load 54
setbyte
callsub prefixkeygen_2
load 55
app_global_put
retsub

// get_dynamic_app_state_val
getdynamicappstateval_13:
store 14
bytec_3 // 0x00
intc_0 // 0
load 14
setbyte
callsub prefixkeygen_2
app_global_get
retsub

// set_account_state_val
setaccountstateval_14:
store 56
txn Sender
bytec_2 // "declared_account_value"
load 56
app_local_put
retsub

// incr_account_state_val
incraccountstateval_15:
store 57
txn Sender
bytec_2 // "declared_account_value"
txn Sender
bytec_2 // "declared_account_value"
app_local_get
load 57
+
app_local_put
retsub

// get_account_state_val
getaccountstateval_16:
txn Sender
bytec_2 // "declared_account_value"
app_local_get
retsub

// set_dynamic_account_state_val
setdynamicaccountstateval_17:
store 59
store 58
txn Sender
bytec_3 // 0x00
intc_0 // 0
load 58
setbyte
callsub prefixkeygen_3
load 59
extract 2 0
app_local_put
retsub

// get_dynamic_account_state_val
getdynamicaccountstateval_18:
store 19
txn Sender
bytec_3 // 0x00
intc_0 // 0
load 19
setbyte
callsub prefixkeygen_3
app_local_get
store 20
load 20
len
itob
extract 6 0
load 20
concat
store 20
load 20
retsub

// _impl
impl_19:
store 32
store 31
store 30
bytec 6 // ""
store 34
load 31
intc_1 // 127
/
store 33
impl_19_l1:
load 33
load 32
intc_1 // 127
/
<=
bz impl_19_l9
load 33
load 31
intc_1 // 127
/
==
bnz impl_19_l8
intc_0 // 0
impl_19_l4:
store 35
load 33
load 32
intc_1 // 127
/
==
bnz impl_19_l7
intc_1 // 127
impl_19_l6:
store 36
load 34
load 30
bytec 4 // 0x000102
load 33
intc_2 // 1
extract3
app_local_get
load 35
load 36
substring3
concat
store 34
load 33
intc_2 // 1
+
store 33
b impl_19_l1
impl_19_l7:
load 32
intc_1 // 127
%
b impl_19_l6
impl_19_l8:
load 31
intc_1 // 127
%
b impl_19_l4
impl_19_l9:
load 34
retsub

// read_impl
readimpl_20:
store 46
store 45
bytec 6 // ""
store 48
load 45
intc_1 // 127
/
store 47
readimpl_20_l1:
load 47
load 46
intc_1 // 127
/
<=
bz readimpl_20_l9
load 47
load 45
intc_1 // 127
/
==
bnz readimpl_20_l8
intc_0 // 0
readimpl_20_l4:
store 49
load 47
load 46
intc_1 // 127
/
==
bnz readimpl_20_l7
intc_1 // 127
readimpl_20_l6:
store 50
load 48
bytec 5 // 0x000102030405060708090a0b0c0d0e0f
load 47
intc_2 // 1
extract3
app_global_get
load 49
load 50
substring3
concat
store 48
load 47
intc_2 // 1
+
store 47
b readimpl_20_l1
readimpl_20_l7:
load 46
intc_1 // 127
%
b readimpl_20_l6
readimpl_20_l8:
load 45
intc_1 // 127
%
b readimpl_20_l4
readimpl_20_l9:
load 48
retsub

// _impl
impl_21:
store 24
store 23
store 22
intc_0 // 0
store 28
load 23
intc_1 // 127
/
store 25
impl_21_l1:
load 25
load 23
load 24
len
+
intc_1 // 127
/
<=
bz impl_21_l12
load 25
load 23
intc_1 // 127
/
==
bnz impl_21_l11
intc_0 // 0
impl_21_l4:
store 26
load 25
load 23
load 24
len
+
intc_1 // 127
/
==
bnz impl_21_l10
intc_1 // 127
impl_21_l6:
store 27
load 22
bytec 4 // 0x000102
load 25
intc_2 // 1
extract3
load 27
intc_1 // 127
!=
load 26
intc_0 // 0
!=
||
bnz impl_21_l9
intc_1 // 127
store 29
load 24
load 28
intc_1 // 127
extract3
impl_21_l8:
app_local_put
load 28
load 29
+
store 28
load 25
intc_2 // 1
+
store 25
b impl_21_l1
impl_21_l9:
load 27
load 26
-
store 29
load 22
bytec 4 // 0x000102
load 25
intc_2 // 1
extract3
app_local_get
intc_0 // 0
load 26
substring3
load 24
load 28
load 29
extract3
concat
load 22
bytec 4 // 0x000102
load 25
intc_2 // 1
extract3
app_local_get
load 27
intc_1 // 127
substring3
concat
b impl_21_l8
impl_21_l10:
load 23
load 24
len
+
intc_1 // 127
%
b impl_21_l6
impl_21_l11:
load 23
intc_1 // 127
%
b impl_21_l4
impl_21_l12:
retsub

// write_impl
writeimpl_22:
store 39
store 38
intc_0 // 0
store 43
load 38
intc_1 // 127
/
store 40
writeimpl_22_l1:
load 40
load 38
load 39
len
+
intc_1 // 127
/
<=
bz writeimpl_22_l12
load 40
load 38
intc_1 // 127
/
==
bnz writeimpl_22_l11
intc_0 // 0
writeimpl_22_l4:
store 41
load 40
load 38
load 39
len
+
intc_1 // 127
/
==
bnz writeimpl_22_l10
intc_1 // 127
writeimpl_22_l6:
store 42
bytec 5 // 0x000102030405060708090a0b0c0d0e0f
load 40
intc_2 // 1
extract3
load 42
intc_1 // 127
!=
load 41
intc_0 // 0
!=
||
bnz writeimpl_22_l9
intc_1 // 127
store 44
load 39
load 43
intc_1 // 127
extract3
writeimpl_22_l8:
app_global_put
load 43
load 44
+
store 43
load 40
intc_2 // 1
+
store 40
b writeimpl_22_l1
writeimpl_22_l9:
load 42
load 41
-
store 44
bytec 5 // 0x000102030405060708090a0b0c0d0e0f
load 40
intc_2 // 1
extract3
app_global_get
intc_0 // 0
load 41
substring3
load 39
load 43
load 44
extract3
concat
bytec 5 // 0x000102030405060708090a0b0c0d0e0f
load 40
intc_2 // 1
extract3
app_global_get
load 42
intc_1 // 127
substring3
concat
b writeimpl_22_l8
writeimpl_22_l10:
load 38
load 39
len
+
intc_1 // 127
%
b writeimpl_22_l6
writeimpl_22_l11:
load 38
intc_1 // 127
%
b writeimpl_22_l4
writeimpl_22_l12:
retsub